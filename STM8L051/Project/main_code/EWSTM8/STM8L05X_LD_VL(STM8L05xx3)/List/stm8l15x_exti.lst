###############################################################################
#
# IAR C/C++ Compiler V2.10.2.149 for STM8                 16/Jun/2015  16:46:08
# Copyright 2010-2014 IAR Systems AB.
#
#    Source file  =  
#        C:\Users\THINK\Documents\GitHub\FTT-TwoLine-Operater\STM8L051\Libraries\STM8L15x_StdPeriph_Driver\src\stm8l15x_exti.c
#    Command line =  
#        C:\Users\THINK\Documents\GitHub\FTT-TwoLine-Operater\STM8L051\Libraries\STM8L15x_StdPeriph_Driver\src\stm8l15x_exti.c
#        -e -Ohz --debug --code_model small --data_model medium -o
#        "C:\Users\THINK\Documents\GitHub\FTT-TwoLine-Operater\STM8L051\Project\main_code\EWSTM8\STM8L05X_LD_VL(STM8L05xx3)\Obj\"
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\stm8\LIB\dlstm8smn.h" -D USE_STM8L1526_EVAL -D STM8L05X_LD_VL -lC
#        "C:\Users\THINK\Documents\GitHub\FTT-TwoLine-Operater\STM8L051\Project\main_code\EWSTM8\STM8L05X_LD_VL(STM8L05xx3)\List\"
#        -lA
#        "C:\Users\THINK\Documents\GitHub\FTT-TwoLine-Operater\STM8L051\Project\main_code\EWSTM8\STM8L05X_LD_VL(STM8L05xx3)\List\"
#        -I
#        C:\Users\THINK\Documents\GitHub\FTT-TwoLine-Operater\STM8L051\Project\main_code\EWSTM8\..\
#        -I
#        C:\Users\THINK\Documents\GitHub\FTT-TwoLine-Operater\STM8L051\Project\main_code\EWSTM8\..\..\..\Libraries\STM8L15x_StdPeriph_Driver\inc\
#        -I
#        C:\Users\THINK\Documents\GitHub\FTT-TwoLine-Operater\STM8L051\Project\main_code\EWSTM8\..\..\..\Utilities\STM8_EVAL\
#        -I
#        C:\Users\THINK\Documents\GitHub\FTT-TwoLine-Operater\STM8L051\Project\main_code\EWSTM8\..\..\..\Utilities\STM8_EVAL\STM8L1526_EVAL\
#        -I
#        C:\Users\THINK\Documents\GitHub\FTT-TwoLine-Operater\STM8L051\Project\main_code\EWSTM8\..\..\..\Utilities\STM8_EVAL\Common\
#        -I
#        C:\Users\THINK\Documents\GitHub\FTT-TwoLine-Operater\STM8L051\Project\main_code\EWSTM8\..\..\..\Utilities\Misc\
#        --require_prototypes --vregs 16
#    List file    =  
#        C:\Users\THINK\Documents\GitHub\FTT-TwoLine-Operater\STM8L051\Project\main_code\EWSTM8\STM8L05X_LD_VL(STM8L05xx3)\List\stm8l15x_exti.lst
#    Object file  =  
#        C:\Users\THINK\Documents\GitHub\FTT-TwoLine-Operater\STM8L051\Project\main_code\EWSTM8\STM8L05X_LD_VL(STM8L05xx3)\Obj\stm8l15x_exti.o
#
###############################################################################

C:\Users\THINK\Documents\GitHub\FTT-TwoLine-Operater\STM8L051\Libraries\STM8L15x_StdPeriph_Driver\src\stm8l15x_exti.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm8l15x_exti.c
      4            * @author  MCD Application Team
      5            * @version V1.6.0
      6            * @date    28-June-2013
      7            * @brief   This file provides firmware functions to manage the following 
      8            *          functionalities of the EXTI peripheral:
      9            *            - Interrupt sensitivity of GPIO ports/pins configuration
     10            *            - Interrupt status management
     11            *  @verbatim
     12            *  
     13            *          ===================================================================
     14            *                                 How to use this driver
     15            *          ===================================================================
     16            *          This driver provides functions to configure and initialise the EXTI 
     17            *          peripheral
     18            *          These functions are split in 2 groups: 
     19            *   
     20            *          1. EXTI configuration: this group includes all needed functions 
     21            *             to configure the EXTI GPIO ports and pins:
     22            *                   - Set GPIO pins sensitivity
     23            *                   - Select GPIO port, GPIO half port and set the GPIO port sensitivity
     24            *                         
     25            *          2. EXTI interrupt status management
     26            *                   - Get the interrupt status: set/reset
     27            *                   - Clear interrupt pending bits
     28            *
     29            *  @endverbatim
     30            *   
     31            ******************************************************************************
     32            *
     33            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     34            * You may not use this file except in compliance with the License.
     35            * You may obtain a copy of the License at:
     36            *
     37            *        http://www.st.com/software_license_agreement_liberty_v2
     38            *
     39            * Unless required by applicable law or agreed to in writing, software 
     40            * distributed under the License is distributed on an "AS IS" BASIS, 
     41            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     42            * See the License for the specific language governing permissions and
     43            * limitations under the License.
     44            *
     45            ****************************************************************************** 
     46            */
     47          
     48          /* Includes ------------------------------------------------------------------*/
     49          #include "stm8l15x_exti.h"
     50          
     51          /** @addtogroup STM8L15x_StdPeriph_Driver
     52            * @{
     53            */
     54          
     55          /** @defgroup EXTI 
     56            * @brief EXTI driver modules
     57            * @{
     58            */ 
     59            
     60          /* Private typedef -----------------------------------------------------------*/
     61          /* Private define ------------------------------------------------------------*/
     62          /* Private macro -------------------------------------------------------------*/
     63          /* Private variables ---------------------------------------------------------*/
     64          /* Private function prototypes -----------------------------------------------*/
     65          /* Private functions ---------------------------------------------------------*/
     66          
     67          /** @defgroup EXTI_Private_Functions
     68            * @{
     69            */
     70          
     71          /** @defgroup EXTI_Group1 Interrupt sensitivity of GPIO ports/pins configuration
     72           *  @brief   Interrupt sensitivity of GPIO ports/pins configuration
     73           *
     74          @verbatim   
     75           ===============================================================================
     76                                   EXTI configuration functions
     77           ===============================================================================  
     78            
     79                 ===================================================================      
     80                                  EXTI Driver: how to configure EXTI
     81                 =================================================================== 
     82                 To use a GPIO pin as an interrupt source, follow theses steps:
     83                 
     84                   1. Configure the GPIO pin in input mode with interrupt enabled using
     85                      GPIO_Init()
     86                    
     87                   2. Configure the GPIO pin sensitivity (falling, rising...) using 
     88                      EXTI_SetPinSensitivity()
     89                    
     90                   3. Enable global interrupts using enableInterrupts()
     91                 
     92                   4. In the IRQ handler corresponding to the GPIO pin, clear the interrupt
     93                      pending bit using EXTI_ClearITPendingBit()
     94          
     95                 To use a GPIO port as an interrupt source, follows theses steps:  
     96                      
     97                   1. Configure the GPIO pins of the same port in input mode with interrupt
     98                      enabled using GPIO_Init()
     99                    
    100                   2. Configure the GPIO port sensitivity (falling, rising...) using 
    101                      EXTI_SetPortSensitivity()
    102                    
    103                   3. Select the GPIO port and the corresponding half port using  
    104                      EXTI_SelectPort() then EXTI_SetHalfPortSelection()
    105                  
    106                   4. Enable global interrupts using enableInterrupts()
    107                 
    108                   5. In the IRQ handler corresponding to the GPIO port, clear the interrupt
    109                      pending bit using EXTI_ClearITPendingBit()
    110          
    111          @endverbatim
    112            * @{
    113            */
    114          
    115          /**
    116            * @brief  Deinitializes the EXTI registers to their default reset value.
    117            * @param  None
    118            * @retval None
    119            */

   \                                 In section .near_func.text, align 1
    120          void EXTI_DeInit(void)
    121          {
    122            EXTI->CR1 = EXTI_CR1_RESET_VALUE;
   \                     EXTI_DeInit:
   \   000000 725F 50A0    CLR       L:0x50a0
    123            EXTI->CR2 = EXTI_CR2_RESET_VALUE;
   \   000004 725F 50A1    CLR       L:0x50a1
    124            EXTI->CR3 = EXTI_CR3_RESET_VALUE;
   \   000008 725F 50A2    CLR       L:0x50a2
    125            EXTI->CR4 = EXTI_CR4_RESET_VALUE;
   \   00000C 725F 50AA    CLR       L:0x50aa
    126            EXTI->SR1 = 0xFF; /* Setting SR1 bits in order to clear flags */
   \   000010 35 FF 50A3   MOV       L:0x50a3, #0xff
    127            EXTI->SR2 = 0xFF; /* Setting SR2 bits in order to clear flags */
   \   000014 35 FF 50A4   MOV       L:0x50a4, #0xff
    128            EXTI->CONF1 = EXTI_CONF1_RESET_VALUE;
   \   000018 725F 50A5    CLR       L:0x50a5
    129            EXTI->CONF2 = EXTI_CONF2_RESET_VALUE;
   \   00001C 725F 50AB    CLR       L:0x50ab
    130          }
   \   000020 81           RET
    131          
    132          /**
    133            * @brief  Sets the external interrupt sensitivity of the selected pin.
    134            * @note   Global interrupts must be disabled before calling this function.
    135            * @note   The modification of external interrupt sensitivity is only possible
    136            *         when he interrupts are disabled.
    137            * @note   The normal behavior is to disable the interrupts before calling this
    138            *         function, and re-enable them after.
    139            * @param  EXTI_Pin : The pin to configure.
    140            *          This parameter can be one of the following values:
    141            *            @arg EXTI_Pin_0: GPIO Pin 0
    142            *            @arg EXTI_Pin_1: GPIO Pin 1
    143            *            @arg EXTI_Pin_2: GPIO Pin 2
    144            *            @arg EXTI_Pin_3: GPIO Pin 3
    145            *            @arg EXTI_Pin_4: GPIO Pin 4
    146            *            @arg EXTI_Pin_5: GPIO Pin 5
    147            *            @arg EXTI_Pin_6: GPIO Pin 6
    148            *            @arg EXTI_Pin_7: GPIO Pin 7              
    149            * @param  EXTI_Trigger : The external interrupt sensitivity value to set.
    150            *          This parameter can be one of the following values:
    151            *            @arg EXTI_Trigger_Falling_Low: Interrupt on Falling edge and Low level
    152            *            @arg EXTI_Trigger_Rising: Interrupt on Rising edge only  
    153            *            @arg EXTI_Trigger_Falling: Interrupt on Falling edge only 
    154            *            @arg EXTI_Trigger_Rising_Falling: Interrupt on Rising and Falling edges       
    155            * @retval None
    156            */

   \                                 In section .near_func.text, align 1
    157          void EXTI_SetPinSensitivity(EXTI_Pin_TypeDef EXTI_Pin, EXTI_Trigger_TypeDef EXTI_Trigger)
    158          {
   \                     EXTI_SetPinSensitivity:
   \   000000 B7 ..        LD        S:?b1, A
    159          
    160            /* Check function parameters */
    161            assert_param(IS_EXTI_PINNUM(EXTI_Pin));
    162            assert_param(IS_EXTI_TRIGGER(EXTI_Trigger));
    163          
    164            /* Clear port sensitivity bits */
    165            switch (EXTI_Pin)
   \   000002 B6 ..        LD        A, S:?b0
   \   000004 48           SLL       A
   \   000005 48           SLL       A
   \   000006 B7 ..        LD        S:?b2, A
   \   000008 B6 ..        LD        A, S:?b0
   \   00000A 4E           SWAP      A
   \   00000B A4 F0        AND       A, #0xf0
   \   00000D B7 ..        LD        S:?b3, A
   \   00000F B6 ..        LD        A, S:?b0
   \   000011 CD ....      CALL      L:?sll8_a_a_6
   \   000014 B7 ..        LD        S:?b4, A
   \   000016 B6 ..        LD        A, S:?b1
   \   000018 27 1D        JREQ      L:??EXTI_SetPinSensitivity_0
   \   00001A A0 02        SUB       A, #0x2
   \   00001C 27 25        JREQ      L:??EXTI_SetPinSensitivity_1
   \   00001E A0 02        SUB       A, #0x2
   \   000020 27 2D        JREQ      L:??EXTI_SetPinSensitivity_2
   \   000022 A0 02        SUB       A, #0x2
   \   000024 27 35        JREQ      L:??EXTI_SetPinSensitivity_3
   \   000026 A0 0A        SUB       A, #0xa
   \   000028 27 42        JREQ      L:??EXTI_SetPinSensitivity_4
   \   00002A A0 02        SUB       A, #0x2
   \   00002C 27 4A        JREQ      L:??EXTI_SetPinSensitivity_5
   \   00002E A0 02        SUB       A, #0x2
   \   000030 27 52        JREQ      L:??EXTI_SetPinSensitivity_6
   \   000032 A0 02        SUB       A, #0x2
   \   000034 27 5A        JREQ      L:??EXTI_SetPinSensitivity_7
   \   000036 81           RET
    166            {
    167              case EXTI_Pin_0:
    168                EXTI->CR1 &=  (uint8_t)(~EXTI_CR1_P0IS);
   \                     ??EXTI_SetPinSensitivity_0:
   \   000037 C6 50A0      LD        A, L:0x50a0
   \   00003A A4 FC        AND       A, #0xfc
   \   00003C C7 50A0      LD        L:0x50a0, A
    169                EXTI->CR1 |= (uint8_t)((uint8_t)(EXTI_Trigger) << EXTI_Pin);
   \   00003F B6 ..        LD        A, S:?b0
   \   000041 20 22        JRA       L:??EXTI_SetPinSensitivity_8
    170                break;
    171              case EXTI_Pin_1:
    172                EXTI->CR1 &=  (uint8_t)(~EXTI_CR1_P1IS);
   \                     ??EXTI_SetPinSensitivity_1:
   \   000043 C6 50A0      LD        A, L:0x50a0
   \   000046 A4 F3        AND       A, #0xf3
   \   000048 C7 50A0      LD        L:0x50a0, A
    173                EXTI->CR1 |= (uint8_t)((uint8_t)(EXTI_Trigger) << EXTI_Pin);
   \   00004B B6 ..        LD        A, S:?b2
   \   00004D 20 16        JRA       L:??EXTI_SetPinSensitivity_8
    174                break;
    175              case EXTI_Pin_2:
    176                EXTI->CR1 &=  (uint8_t)(~EXTI_CR1_P2IS);
   \                     ??EXTI_SetPinSensitivity_2:
   \   00004F C6 50A0      LD        A, L:0x50a0
   \   000052 A4 CF        AND       A, #0xcf
   \   000054 C7 50A0      LD        L:0x50a0, A
    177                EXTI->CR1 |= (uint8_t)((uint8_t)(EXTI_Trigger) << EXTI_Pin);
   \   000057 B6 ..        LD        A, S:?b3
   \   000059 20 0A        JRA       L:??EXTI_SetPinSensitivity_8
    178                break;
    179              case EXTI_Pin_3:
    180                EXTI->CR1 &=  (uint8_t)(~EXTI_CR1_P3IS);
   \                     ??EXTI_SetPinSensitivity_3:
   \   00005B C6 50A0      LD        A, L:0x50a0
   \   00005E A4 3F        AND       A, #0x3f
   \   000060 C7 50A0      LD        L:0x50a0, A
    181                EXTI->CR1 |= (uint8_t)((uint8_t)(EXTI_Trigger) << EXTI_Pin);
   \   000063 B6 ..        LD        A, S:?b4
   \                     ??EXTI_SetPinSensitivity_8:
   \   000065 CA 50A0      OR        A, L:0x50a0
   \   000068 C7 50A0      LD        L:0x50a0, A
    182                break;
   \   00006B 81           RET
    183              case EXTI_Pin_4:
    184                EXTI->CR2 &=  (uint8_t)(~EXTI_CR2_P4IS);
   \                     ??EXTI_SetPinSensitivity_4:
   \   00006C C6 50A1      LD        A, L:0x50a1
   \   00006F A4 FC        AND       A, #0xfc
   \   000071 C7 50A1      LD        L:0x50a1, A
    185                EXTI->CR2 |= (uint8_t)((uint8_t)(EXTI_Trigger) << ((uint8_t)EXTI_Pin & (uint8_t)0xEF));
   \   000074 B6 ..        LD        A, S:?b0
   \   000076 20 22        JRA       L:??EXTI_SetPinSensitivity_9
    186                break;
    187              case EXTI_Pin_5:
    188                EXTI->CR2 &=  (uint8_t)(~EXTI_CR2_P5IS);
   \                     ??EXTI_SetPinSensitivity_5:
   \   000078 C6 50A1      LD        A, L:0x50a1
   \   00007B A4 F3        AND       A, #0xf3
   \   00007D C7 50A1      LD        L:0x50a1, A
    189                EXTI->CR2 |= (uint8_t)((uint8_t)(EXTI_Trigger) << ((uint8_t)EXTI_Pin & (uint8_t)0xEF));
   \   000080 B6 ..        LD        A, S:?b2
   \   000082 20 16        JRA       L:??EXTI_SetPinSensitivity_9
    190                break;
    191              case EXTI_Pin_6:
    192                EXTI->CR2 &=  (uint8_t)(~EXTI_CR2_P6IS);
   \                     ??EXTI_SetPinSensitivity_6:
   \   000084 C6 50A1      LD        A, L:0x50a1
   \   000087 A4 CF        AND       A, #0xcf
   \   000089 C7 50A1      LD        L:0x50a1, A
    193                EXTI->CR2 |= (uint8_t)((uint8_t)(EXTI_Trigger) << ((uint8_t)EXTI_Pin & (uint8_t)0xEF));
   \   00008C B6 ..        LD        A, S:?b3
   \   00008E 20 0A        JRA       L:??EXTI_SetPinSensitivity_9
    194                break;
    195              case EXTI_Pin_7:
    196                EXTI->CR2 &=  (uint8_t)(~EXTI_CR2_P7IS);
   \                     ??EXTI_SetPinSensitivity_7:
   \   000090 C6 50A1      LD        A, L:0x50a1
   \   000093 A4 3F        AND       A, #0x3f
   \   000095 C7 50A1      LD        L:0x50a1, A
    197                EXTI->CR2 |= (uint8_t)((uint8_t)(EXTI_Trigger) << ((uint8_t)EXTI_Pin & (uint8_t)0xEF));
   \   000098 B6 ..        LD        A, S:?b4
   \                     ??EXTI_SetPinSensitivity_9:
   \   00009A CA 50A1      OR        A, L:0x50a1
   \   00009D C7 50A1      LD        L:0x50a1, A
    198                break;
    199              default:
    200                break;
    201            }
    202          }
   \   0000A0 81           RET
    203          
    204          /**
    205            * @brief  Selects the port interrupt selection.
    206            * @param  EXTI_Port : The port number to access.
    207            *          This parameter can be one of the following values:
    208            *            @arg EXTI_Port_B: GPIO Port B
    209            *            @arg EXTI_Port_D: GPIO Port D
    210            *            @arg EXTI_Port_E: GPIO Port E
    211            *            @arg EXTI_Port_F: GPIO Port F
    212            *            @arg EXTI_Port_G: GPIO Port G
    213            *            @arg EXTI_Port_H: GPIO Port H   
    214            * @retval None
    215            */

   \                                 In section .near_func.text, align 1
    216          void EXTI_SelectPort(EXTI_Port_TypeDef EXTI_Port)
    217          {
    218            /* Check function parameter */
    219            assert_param(IS_EXTI_PORT(EXTI_Port));
    220          
    221            if (EXTI_Port == EXTI_Port_B)
   \                     EXTI_SelectPort:
   \   000000 4D           TNZ       A
   \   000001 26 05        JRNE      L:??EXTI_SelectPort_0
    222            {
    223              /* Select Port B by resetting PGBS bit in CONF2 register */
    224              EXTI->CONF2 &= (uint8_t) (~EXTI_CONF2_PGBS);
   \   000003 721B 50AB    BRES      L:0x50ab, #0x5
   \   000007 81           RET
    225            }
    226            else if (EXTI_Port == EXTI_Port_D)
   \                     ??EXTI_SelectPort_0:
   \   000008 A1 02        CP        A, #0x2
   \   00000A 26 05        JRNE      L:??EXTI_SelectPort_1
    227            {
    228              /* Select Port D by resetting PHDS bit in CONF2 register */
    229              EXTI->CONF2 &= (uint8_t) (~EXTI_CONF2_PHDS);
   \   00000C 721D 50AB    BRES      L:0x50ab, #0x6
   \   000010 81           RET
    230            }
    231            else if (EXTI_Port == EXTI_Port_E)
   \                     ??EXTI_SelectPort_1:
   \   000011 A1 04        CP        A, #0x4
   \   000013 26 05        JRNE      L:??EXTI_SelectPort_2
    232            {
    233              /* Select Port E by resetting PFES bit in CONF1 register */
    234              EXTI->CONF1 &= (uint8_t) (~EXTI_CONF1_PFES);
   \   000015 721F 50A5    BRES      L:0x50a5, #0x7
   \   000019 81           RET
    235            }
    236            else if (EXTI_Port == EXTI_Port_F)
   \                     ??EXTI_SelectPort_2:
   \   00001A A1 06        CP        A, #0x6
   \   00001C 26 05        JRNE      L:??EXTI_SelectPort_3
    237            {
    238              /* Select Port F by setting PFES bit in CONF1 register */
    239              EXTI->CONF1 |= (uint8_t) (EXTI_CONF1_PFES);
   \   00001E 721E 50A5    BSET      L:0x50a5, #0x7
   \   000022 81           RET
    240            }
    241            else if (EXTI_Port == EXTI_Port_G)
   \                     ??EXTI_SelectPort_3:
   \   000023 A1 10        CP        A, #0x10
   \   000025 26 05        JRNE      L:??EXTI_SelectPort_4
    242            {
    243              /* Select Port G by setting PGBS bit in CONF2 register */
    244              EXTI->CONF2 |= (uint8_t) (EXTI_CONF2_PGBS);
   \   000027 721A 50AB    BSET      L:0x50ab, #0x5
   \   00002B 81           RET
    245            }
    246            else /* EXTI_Port is EXTI_Port_H */
    247            {
    248              /* Select Port H by setting PHDS bit in CONF2 register */
    249              EXTI->CONF2 |= (uint8_t) (EXTI_CONF2_PHDS);
   \                     ??EXTI_SelectPort_4:
   \   00002C 721C 50AB    BSET      L:0x50ab, #0x6
    250            }
    251          }
   \   000030 81           RET
    252          
    253          /**
    254            * @brief  Configures the half port interrupt selection.
    255            * @note   This function should be called once the port sensitivity configured,
    256            *         otherwise it will not have any effect on the port external interrupt.
    257            * @note   This function should be called after EXTI_SelectPort() function which
    258            *         selects the port to be used otherwise ports are selected by default
    259            * @param  EXTI_HalfPort : The port part to access (MSB or LSB).
    260            *          This parameter can be one of the following values:
    261            *            @arg EXTI_HalfPort_B_LSB: Interrupt selector PB(3:0)
    262            *            @arg EXTI_HalfPort_B_MSB: Interrupt selector PB(7:4)
    263            *            @arg EXTI_HalfPort_D_LSB: Interrupt selector PD(3:0)
    264            *            @arg EXTI_HalfPort_D_MSB: Interrupt selector PD(7:4)
    265            *            @arg EXTI_HalfPort_E_LSB: Interrupt selector PE(3:0)
    266            *            @arg EXTI_HalfPort_E_MSB: Interrupt selector PE(7:4)
    267            *            @arg EXTI_HalfPort_F_LSB: Interrupt selector PF(3:0)
    268            *            @arg EXTI_HalfPort_F_MSB: Interrupt selector PF(7:4)
    269            *            @arg EXTI_HalfPort_G_LSB: Interrupt selector PG(3:0)
    270            *            @arg EXTI_HalfPort_G_MSB: Interrupt selector PG(7:4)
    271            *            @arg EXTI_HalfPort_H_LSB: Interrupt selector PH(3:0)
    272            *            @arg EXTI_HalfPort_H_MSB: Interrupt selector PH(7:4)                      
    273            * @param  NewState : The external interrupt new state.
    274              *         This parameter can be: ENABLE or DISABLE.
    275            * @retval None
    276            */

   \                                 In section .near_func.text, align 1
    277          void EXTI_SetHalfPortSelection(EXTI_HalfPort_TypeDef EXTI_HalfPort,
    278                                         FunctionalState NewState)
    279          {
   \                     EXTI_SetHalfPortSelection:
   \   000000 B7 ..        LD        S:?b1, A
    280            /* Check function parameters */
    281            assert_param(IS_EXTI_HALFPORT(EXTI_HalfPort));
    282            assert_param(IS_FUNCTIONAL_STATE(NewState));
    283          
    284            if ((EXTI_HalfPort & 0x80) == 0x00)
   \   000002 A5 80        BCP       A, #0x80
   \   000004 26 16        JRNE      L:??EXTI_SetHalfPortSelection_0
    285            {
    286              if (NewState != DISABLE)
   \   000006 3D ..        TNZ       S:?b0
   \   000008 27 07        JREQ      L:??EXTI_SetHalfPortSelection_1
    287              {
    288                /* Enable port interrupt selector */
    289                EXTI->CONF1 |= (uint8_t)EXTI_HalfPort;
   \   00000A B6 ..        LD        A, S:?b1
   \   00000C CA 50A5      OR        A, L:0x50a5
   \   00000F 20 07        JRA       L:??EXTI_SetHalfPortSelection_2
    290              }
    291              else /*NewState == DISABLE */
    292              {
    293                /* Disable port interrupt selector */
    294                EXTI->CONF1 &= (uint8_t)(~(uint8_t)EXTI_HalfPort);
   \                     ??EXTI_SetHalfPortSelection_1:
   \   000011 33 ..        CPL       S:?b1
   \   000013 B6 ..        LD        A, S:?b1
   \   000015 C4 50A5      AND       A, L:0x50a5
   \                     ??EXTI_SetHalfPortSelection_2:
   \   000018 C7 50A5      LD        L:0x50a5, A
   \   00001B 81           RET
    295              }
    296            }
    297            else
    298            {
    299              if (NewState != DISABLE)
   \                     ??EXTI_SetHalfPortSelection_0:
   \   00001C B6 ..        LD        A, S:?b1
   \   00001E A4 7F        AND       A, #0x7f
   \   000020 3D ..        TNZ       S:?b0
   \   000022 27 05        JREQ      L:??EXTI_SetHalfPortSelection_3
    300              {
    301                /* Enable port interrupt selector */
    302                EXTI->CONF2 |= (uint8_t)(EXTI_HalfPort & (uint8_t)0x7F);
   \   000024 CA 50AB      OR        A, L:0x50ab
   \   000027 20 04        JRA       L:??EXTI_SetHalfPortSelection_4
    303              }
    304              else /*NewState == DISABLE */
    305              {
    306                /* Disable port interrupt selector */
    307                EXTI->CONF2 &= (uint8_t)(~(uint8_t) (EXTI_HalfPort & (uint8_t)0x7F));
   \                     ??EXTI_SetHalfPortSelection_3:
   \   000029 43           CPL       A
   \   00002A C4 50AB      AND       A, L:0x50ab
   \                     ??EXTI_SetHalfPortSelection_4:
   \   00002D C7 50AB      LD        L:0x50ab, A
    308              }
    309            }
    310          }
   \   000030 81           RET
    311          
    312          /**
    313            * @brief  Sets the external interrupt sensitivity of the selected port.
    314            * @note   Global interrupts must be disabled before calling this function.
    315            * @note   The modification of external interrupt sensitivity is only possible
    316            *         when the interrupts are disabled.
    317            * @note   The normal behavior is to disable the interrupts before calling this
    318            *         function, and re-enable them after.
    319            * @param  EXTI_Port : The port number to access.
    320            *          This parameter can be one of the following values:
    321            *            @arg EXTI_Port_B: GPIO Port B
    322            *            @arg EXTI_Port_D: GPIO Port D
    323            *            @arg EXTI_Port_E: GPIO Port E
    324            *            @arg EXTI_Port_F: GPIO Port F
    325            *            @arg EXTI_Port_G: GPIO Port G
    326            *            @arg EXTI_Port_H: GPIO Port H  
    327            * @param  EXTI_Trigger : The external interrupt sensitivity value to set.
    328            *          This parameter can be one of the following values:
    329            *            @arg EXTI_Trigger_Falling_Low: Interrupt on Falling edge and Low level
    330            *            @arg EXTI_Trigger_Rising: Interrupt on Rising edge only  
    331            *            @arg EXTI_Trigger_Falling: Interrupt on Falling edge only 
    332            *            @arg EXTI_Trigger_Rising_Falling: Interrupt on Rising and Falling edges 
    333            * @retval None
    334            */

   \                                 In section .near_func.text, align 1
    335          void EXTI_SetPortSensitivity(EXTI_Port_TypeDef EXTI_Port,
    336                                       EXTI_Trigger_TypeDef EXTI_Trigger)
    337          {
   \                     EXTI_SetPortSensitivity:
   \   000000 B7 ..        LD        S:?b1, A
    338            /* Check function parameters */
    339            assert_param(IS_EXTI_PORT(EXTI_Port));
    340            assert_param(IS_EXTI_TRIGGER(EXTI_Trigger));
    341          
    342            /* Ceck if selected port is in EXTI_CR3 register */
    343            if ((EXTI_Port & 0xF0) == 0x00)
   \   000002 905F         CLRW      Y
   \   000004 61           EXG       A, YL
   \   000005 B6 ..        LD        A, S:?b0
   \   000007 61           EXG       A, YL
   \   000008 A5 F0        BCP       A, #0xf0
   \   00000A 26 1E        JRNE      L:??EXTI_SetPortSensitivity_0
    344            {
    345              /* Reset the trigger bits corresponding to EXTI_Port */
    346              EXTI->CR3 &= (uint8_t) (~(uint8_t)((uint8_t)0x03 << EXTI_Port));
   \   00000C AE 0003      LDW       X, #0x3
   \   00000F B6 ..        LD        A, S:?b1
   \   000011 CD ....      CALL      L:?sll16_x_x_a
   \   000014 9F           LD        A, XL
   \   000015 43           CPL       A
   \   000016 C4 50A2      AND       A, L:0x50a2
   \   000019 C7 50A2      LD        L:0x50a2, A
    347              /* Write EXTI port trigger */
    348              EXTI->CR3 |= (uint8_t)((uint8_t)(EXTI_Trigger) << EXTI_Port);
   \   00001C B6 ..        LD        A, S:?b1
   \   00001E 93           LDW       X, Y
   \   00001F CD ....      CALL      L:?sll16_x_x_a
   \   000022 9F           LD        A, XL
   \   000023 CA 50A2      OR        A, L:0x50a2
   \   000026 C7 50A2      LD        L:0x50a2, A
   \   000029 81           RET
    349            }
    350            else /* selected port is in EXTI_CR4 register */
    351            {
    352              /* Reset the trigger bits corresponding to EXTI_Port */
    353              EXTI->CR4 &= (uint8_t) (~(uint8_t)((uint8_t)0x03 << (EXTI_Port & 0x0F)));
   \                     ??EXTI_SetPortSensitivity_0:
   \   00002A B6 ..        LD        A, S:?b1
   \   00002C A4 0F        AND       A, #0xf
   \   00002E B7 ..        LD        S:?b0, A
   \   000030 AE 0003      LDW       X, #0x3
   \   000033 CD ....      CALL      L:?sll16_x_x_a
   \   000036 9F           LD        A, XL
   \   000037 43           CPL       A
   \   000038 C4 50AA      AND       A, L:0x50aa
   \   00003B C7 50AA      LD        L:0x50aa, A
    354              /* Write EXTI port trigger */
    355              EXTI->CR4 |= (uint8_t)(EXTI_Trigger << (EXTI_Port & 0x0F));
   \   00003E B6 ..        LD        A, S:?b0
   \   000040 93           LDW       X, Y
   \   000041 CD ....      CALL      L:?sll16_x_x_a
   \   000044 9F           LD        A, XL
   \   000045 CA 50AA      OR        A, L:0x50aa
   \   000048 C7 50AA      LD        L:0x50aa, A
    356            }
    357          }
   \   00004B 81           RET
    358          
    359          /**
    360            * @brief  Gets the external interrupt sensitivity of the selected pin.
    361            * @param  EXTI_Pin : The pin number to access.
    362            *          This parameter can be one of the following values:
    363            *            @arg EXTI_Pin_0: GPIO Pin 0
    364            *            @arg EXTI_Pin_1: GPIO Pin 1
    365            *            @arg EXTI_Pin_2: GPIO Pin 2
    366            *            @arg EXTI_Pin_3: GPIO Pin 3
    367            *            @arg EXTI_Pin_4: GPIO Pin 4
    368            *            @arg EXTI_Pin_5: GPIO Pin 5
    369            *            @arg EXTI_Pin_6: GPIO Pin 6
    370            *            @arg EXTI_Pin_7: GPIO Pin 7 
    371            * @retval The external interrupt sensitivity of the selected port.
    372            */

   \                                 In section .near_func.text, align 1
    373          EXTI_Trigger_TypeDef EXTI_GetPinSensitivity(EXTI_Pin_TypeDef EXTI_Pin)
    374          {
    375            uint8_t value = 0;
   \                     EXTI_GetPinSensitivity:
   \   000000 3F ..        CLR       S:?b0
    376          
    377            /* Check function parameters */
    378            assert_param(IS_EXTI_PINNUM(EXTI_Pin));
    379          
    380            switch (EXTI_Pin)
   \   000002 4D           TNZ       A
   \   000003 27 1E        JREQ      L:??EXTI_GetPinSensitivity_0
   \   000005 A0 02        SUB       A, #0x2
   \   000007 27 1F        JREQ      L:??EXTI_GetPinSensitivity_1
   \   000009 A0 02        SUB       A, #0x2
   \   00000B 27 20        JREQ      L:??EXTI_GetPinSensitivity_2
   \   00000D A0 02        SUB       A, #0x2
   \   00000F 27 21        JREQ      L:??EXTI_GetPinSensitivity_3
   \   000011 A0 0A        SUB       A, #0xa
   \   000013 27 22        JREQ      L:??EXTI_GetPinSensitivity_4
   \   000015 A0 02        SUB       A, #0x2
   \   000017 27 23        JREQ      L:??EXTI_GetPinSensitivity_5
   \   000019 A0 02        SUB       A, #0x2
   \   00001B 27 26        JREQ      L:??EXTI_GetPinSensitivity_6
   \   00001D A0 02        SUB       A, #0x2
   \   00001F 27 2C        JREQ      L:??EXTI_GetPinSensitivity_7
   \   000021 20 32        JRA       L:??EXTI_GetPinSensitivity_8
    381            {
    382              case EXTI_Pin_0:
    383                value = (uint8_t)(EXTI->CR1 & EXTI_CR1_P0IS);
   \                     ??EXTI_GetPinSensitivity_0:
   \   000023 C6 50A0      LD        A, L:0x50a0
   \   000026 20 21        JRA       L:??EXTI_GetPinSensitivity_9
    384                break;
    385              case EXTI_Pin_1:
    386                value = (uint8_t)((uint8_t)(EXTI->CR1 & EXTI_CR1_P1IS) >> EXTI_Pin_1);
   \                     ??EXTI_GetPinSensitivity_1:
   \   000028 C6 50A0      LD        A, L:0x50a0
   \   00002B 20 12        JRA       L:??EXTI_GetPinSensitivity_10
    387                break;
    388              case EXTI_Pin_2:
    389                value = (uint8_t)((uint8_t)(EXTI->CR1 & EXTI_CR1_P2IS) >> EXTI_Pin_2);
   \                     ??EXTI_GetPinSensitivity_2:
   \   00002D C6 50A0      LD        A, L:0x50a0
   \   000030 20 14        JRA       L:??EXTI_GetPinSensitivity_11
    390                break;
    391              case EXTI_Pin_3:
    392                value = (uint8_t)((uint8_t)(EXTI->CR1 & EXTI_CR1_P3IS) >> EXTI_Pin_3);
   \                     ??EXTI_GetPinSensitivity_3:
   \   000032 C6 50A0      LD        A, L:0x50a0
   \   000035 20 19        JRA       L:??EXTI_GetPinSensitivity_12
    393                break;
    394              case EXTI_Pin_4:
    395                value = (uint8_t)(EXTI->CR2 & EXTI_CR2_P4IS);
   \                     ??EXTI_GetPinSensitivity_4:
   \   000037 C6 50A1      LD        A, L:0x50a1
   \   00003A 20 0D        JRA       L:??EXTI_GetPinSensitivity_9
    396                break;
    397              case EXTI_Pin_5:
    398                value = (uint8_t)((uint8_t)(EXTI->CR2 & EXTI_CR2_P5IS) >> ((uint8_t)EXTI_Pin_5 & (uint8_t)0x0F));
   \                     ??EXTI_GetPinSensitivity_5:
   \   00003C C6 50A1      LD        A, L:0x50a1
   \                     ??EXTI_GetPinSensitivity_10:
   \   00003F 44           SRL       A
   \   000040 44           SRL       A
   \   000041 20 06        JRA       L:??EXTI_GetPinSensitivity_9
    399                break;
    400              case EXTI_Pin_6:
    401                value = (uint8_t)((uint8_t)(EXTI->CR2 & EXTI_CR2_P6IS) >> ((uint8_t)EXTI_Pin_6 & (uint8_t)0x0F));
   \                     ??EXTI_GetPinSensitivity_6:
   \   000043 C6 50A1      LD        A, L:0x50a1
   \                     ??EXTI_GetPinSensitivity_11:
   \   000046 4E           SWAP      A
   \   000047 A4 0F        AND       A, #0xf
   \                     ??EXTI_GetPinSensitivity_9:
   \   000049 A4 03        AND       A, #0x3
   \   00004B 20 06        JRA       L:??EXTI_GetPinSensitivity_13
    402                break;
    403              case EXTI_Pin_7:
    404                value = (uint8_t)((uint8_t)(EXTI->CR2 & EXTI_CR2_P7IS) >> ((uint8_t)EXTI_Pin_7 & (uint8_t)0x0F));
   \                     ??EXTI_GetPinSensitivity_7:
   \   00004D C6 50A1      LD        A, L:0x50a1
   \                     ??EXTI_GetPinSensitivity_12:
   \   000050 CD ....      CALL      L:?srl8_a_a_6
   \                     ??EXTI_GetPinSensitivity_13:
   \   000053 B7 ..        LD        S:?b0, A
    405                break;
    406              default:
    407                break;
    408            }
    409            return((EXTI_Trigger_TypeDef)value);
   \                     ??EXTI_GetPinSensitivity_8:
   \   000055 B6 ..        LD        A, S:?b0
   \   000057 81           RET
    410          }
    411          
    412          /**
    413            * @brief  Gets the external interrupt sensitivity of the selected port.
    414            * @param  EXTI_Port : The port number to access.
    415            *          This parameter can be one of the following values:
    416            *            @arg EXTI_Port_B: GPIO Port B
    417            *            @arg EXTI_Port_D: GPIO Port D
    418            *            @arg EXTI_Port_E: GPIO Port E
    419            *            @arg EXTI_Port_F: GPIO Port F
    420            *            @arg EXTI_Port_G: GPIO Port G
    421            *            @arg EXTI_Port_H: GPIO Port H  
    422            * @retval The external interrupt sensitivity of the selected port.
    423            */

   \                                 In section .near_func.text, align 1
    424          EXTI_Trigger_TypeDef EXTI_GetPortSensitivity(EXTI_Port_TypeDef EXTI_Port)
    425          {
   \                     EXTI_GetPortSensitivity:
   \   000000 B7 ..        LD        S:?b0, A
    426            uint8_t portsensitivity = 0;
    427          
    428            /* Check function parameters */
    429            assert_param(IS_EXTI_PORT(EXTI_Port));
    430          
    431            /* Check if selected port is in EXTI_CR3 */
    432            if ((EXTI_Port & 0xF0) == 0x00)
   \   000002 A5 F0        BCP       A, #0xf0
   \   000004 26 05        JRNE      L:??EXTI_GetPortSensitivity_0
    433            {
    434              /* Get port sensitivity */
    435              portsensitivity = (uint8_t)((uint8_t)0x03 & (uint8_t)(EXTI->CR3 >> EXTI_Port));
   \   000006 C6 50A2      LD        A, L:0x50a2
   \   000009 20 09        JRA       L:??EXTI_GetPortSensitivity_1
    436            }
    437            /* selected port is in EXTI_CR4 */
    438            else
    439            {
    440              /* Get port sensitivity */
    441              portsensitivity = (uint8_t)((uint8_t)0x03 & (uint8_t)(EXTI->CR4 >> (EXTI_Port & 0x0F)));
   \                     ??EXTI_GetPortSensitivity_0:
   \   00000B B6 ..        LD        A, S:?b0
   \   00000D A4 0F        AND       A, #0xf
   \   00000F B7 ..        LD        S:?b0, A
   \   000011 C6 50AA      LD        A, L:0x50aa
   \                     ??EXTI_GetPortSensitivity_1:
   \   000014 5F           CLRW      X
   \   000015 97           LD        XL, A
   \   000016 B6 ..        LD        A, S:?b0
   \   000018 CD ....      CALL      L:?sra16_x_x_a
   \   00001B 9F           LD        A, XL
   \   00001C A4 03        AND       A, #0x3
    442            }
    443          
    444            return((EXTI_Trigger_TypeDef)portsensitivity);
   \   00001E 81           RET
    445          }
    446          
    447          /**
    448            * @}
    449            */
    450          
    451          /** @defgroup EXTI_Group2 EXTI Interrupt status management functions
    452           *  @brief    EXTI Interrupt status management functions
    453           *
    454          @verbatim   
    455           ===============================================================================
    456                             EXTI Interrupt status management functions
    457           ===============================================================================  
    458          
    459          @endverbatim
    460            * @{
    461            */
    462          
    463          /**
    464            * @brief  Gets the external interrupt status.
    465            * @param  EXTI_IT : Specifies the interrupt to read.
    466            *          This parameter can be one of the following values:
    467            *            @arg EXTI_IT_Pin0: GPIO Pin 0
    468            *            @arg EXTI_IT_Pin1: GPIO Pin 1
    469            *            @arg EXTI_IT_Pin2: GPIO Pin 2
    470            *            @arg EXTI_IT_Pin3: GPIO Pin 3
    471            *            @arg EXTI_IT_Pin4: GPIO Pin 4
    472            *            @arg EXTI_IT_Pin5: GPIO Pin 5
    473            *            @arg EXTI_IT_Pin6: GPIO Pin 6
    474            *            @arg EXTI_IT_Pin7: GPIO Pin 7 
    475            *            @arg EXTI_IT_PortB: GPIO Port B
    476            *            @arg EXTI_IT_PortD: GPIO Port D
    477            *            @arg EXTI_IT_PortE: GPIO Port E
    478            *            @arg EXTI_IT_PortF: GPIO Port F
    479            *            @arg EXTI_IT_PortG: GPIO Port G
    480            *            @arg EXTI_IT_PortH: GPIO Port H           
    481            * @retval The status of the specified interrupt.
    482            *         This parameter can be a SET or RESET
    483            */

   \                                 In section .near_func.text, align 1
    484          ITStatus EXTI_GetITStatus(EXTI_IT_TypeDef EXTI_IT)
    485          {
    486            ITStatus status = RESET;
    487            /* Check function parameters */
    488            assert_param(IS_EXTI_ITPENDINGBIT(EXTI_IT));
    489          
    490            if (((uint16_t)EXTI_IT & (uint16_t)0xFF00) == 0x0100)
   \                     EXTI_GetITStatus:
   \   000000 CD ....      CALL      L:?Subroutine0
   \                     ??CrossCallReturnLabel_1:
   \   000003 26 04        JRNE      L:??EXTI_GetITStatus_0
    491            {
    492              status = (ITStatus)(EXTI->SR2 & (uint8_t)((uint16_t)EXTI_IT & (uint16_t)0x00FF));
   \   000005 C4 50A4      AND       A, L:0x50a4
   \   000008 81           RET
    493            }
    494            else
    495            {
    496              status = (ITStatus)(EXTI->SR1 & ((uint8_t)((uint16_t)EXTI_IT & (uint16_t)0x00FF)));
   \                     ??EXTI_GetITStatus_0:
   \   000009 C4 50A3      AND       A, L:0x50a3
    497            }
    498            return((ITStatus)status);
   \   00000C 81           RET
    499          }

   \                                 In section .near_func.text, align 1
   \                     ?Subroutine0:
   \   000000 9093         LDW       Y, X
   \   000002 01           RRWA      X, A
   \   000003 4F           CLR       A
   \   000004 02           RLWA      X, A
   \   000005 51           EXGW      X, Y
   \   000006 90A3 0100    CPW       Y, #0x100
   \   00000A 9F           LD        A, XL
   \   00000B 81           RET
    500          
    501          /**
    502            * @brief  Clears the specified interrupt pending bit
    503            * @param  EXTI_IT : Specifies the interrupt to clear
    504            *          This parameter can be one of the following values:
    505            *            @arg EXTI_IT_Pin0: GPIO Pin 0
    506            *            @arg EXTI_IT_Pin1: GPIO Pin 1
    507            *            @arg EXTI_IT_Pin2: GPIO Pin 2
    508            *            @arg EXTI_IT_Pin3: GPIO Pin 3
    509            *            @arg EXTI_IT_Pin4: GPIO Pin 4
    510            *            @arg EXTI_IT_Pin5: GPIO Pin 5
    511            *            @arg EXTI_IT_Pin6: GPIO Pin 6
    512            *            @arg EXTI_IT_Pin7: GPIO Pin 7 
    513            *            @arg EXTI_IT_PortB: GPIO Port B
    514            *            @arg EXTI_IT_PortD: GPIO Port D
    515            *            @arg EXTI_IT_PortE: GPIO Port E
    516            *            @arg EXTI_IT_PortF: GPIO Port F
    517            *            @arg EXTI_IT_PortG: GPIO Port G
    518            *            @arg EXTI_IT_PortH: GPIO Port H  
    519            * @retval None
    520            */

   \                                 In section .near_func.text, align 1
    521          void EXTI_ClearITPendingBit(EXTI_IT_TypeDef EXTI_IT)
    522          {
    523            uint16_t tempvalue = 0;
    524          
    525            /* Check function parameters */
    526            assert_param(IS_EXTI_ITPENDINGBIT(EXTI_IT));
    527          
    528            tempvalue = ((uint16_t)EXTI_IT & (uint16_t)0xFF00);
    529          
    530            if ( tempvalue == 0x0100)
   \                     EXTI_ClearITPendingBit:
   \   000000 CD ....      CALL      L:?Subroutine0
   \                     ??CrossCallReturnLabel_0:
   \   000003 26 04        JRNE      L:??EXTI_ClearITPendingBit_0
    531            {
    532              EXTI->SR2 = (uint8_t)((uint16_t)EXTI_IT & (uint16_t)0x00FF);
   \   000005 C7 50A4      LD        L:0x50a4, A
   \   000008 81           RET
    533            }
    534            else
    535            {
    536              EXTI->SR1 = (uint8_t) (EXTI_IT);
   \                     ??EXTI_ClearITPendingBit_0:
   \   000009 C7 50A3      LD        L:0x50a3, A
    537            }
    538          }
   \   00000C 81           RET
    539          
    540          /**
    541            * @}
    542            */ 
    543          
    544          /**
    545            * @}
    546            */ 
    547            
    548          /**
    549            * @}
    550            */
    551          
    552          /**
    553            * @}
    554            */
    555          
    556          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Section sizes:

   Bytes  Function/Label
   -----  --------------
      12  ?Subroutine0
      13  EXTI_ClearITPendingBit
      33  EXTI_DeInit
      13  EXTI_GetITStatus
      88  EXTI_GetPinSensitivity
      31  EXTI_GetPortSensitivity
      49  EXTI_SelectPort
      49  EXTI_SetHalfPortSelection
     161  EXTI_SetPinSensitivity
      76  EXTI_SetPortSensitivity

 
 525 bytes in section .near_func.text
 
 525 bytes of CODE memory

Errors: none
Warnings: none
