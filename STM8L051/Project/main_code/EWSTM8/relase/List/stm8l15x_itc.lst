###############################################################################
#
# IAR C/C++ Compiler V2.10.2.149 for STM8                 09/Jun/2015  11:00:16
# Copyright 2010-2014 IAR Systems AB.
#
#    Source file  =  
#        C:\Users\THINK\Documents\GitHub\FTT-TwoLine-Operater\STM8L051\Libraries\STM8L15x_StdPeriph_Driver\src\stm8l15x_itc.c
#    Command line =  
#        C:\Users\THINK\Documents\GitHub\FTT-TwoLine-Operater\STM8L051\Libraries\STM8L15x_StdPeriph_Driver\src\stm8l15x_itc.c
#        -e -Ohz --debug --code_model medium --data_model medium -o
#        C:\Users\THINK\Documents\GitHub\FTT-TwoLine-Operater\STM8L051\Project\main_code\EWSTM8\relase\Obj\
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\stm8\LIB\dlstm8mmn.h" -D USE_STM8L1526_EVAL -D STM8L05X_LD_VL -lC
#        C:\Users\THINK\Documents\GitHub\FTT-TwoLine-Operater\STM8L051\Project\main_code\EWSTM8\relase\List\
#        -lA
#        C:\Users\THINK\Documents\GitHub\FTT-TwoLine-Operater\STM8L051\Project\main_code\EWSTM8\relase\List\
#        -I
#        C:\Users\THINK\Documents\GitHub\FTT-TwoLine-Operater\STM8L051\Project\main_code\EWSTM8\..\
#        -I
#        C:\Users\THINK\Documents\GitHub\FTT-TwoLine-Operater\STM8L051\Project\main_code\EWSTM8\..\..\..\Libraries\STM8L15x_StdPeriph_Driver\inc\
#        -I
#        C:\Users\THINK\Documents\GitHub\FTT-TwoLine-Operater\STM8L051\Project\main_code\EWSTM8\..\..\..\Utilities\STM8_EVAL\
#        -I
#        C:\Users\THINK\Documents\GitHub\FTT-TwoLine-Operater\STM8L051\Project\main_code\EWSTM8\..\..\..\Utilities\STM8_EVAL\STM8L1526_EVAL\
#        -I
#        C:\Users\THINK\Documents\GitHub\FTT-TwoLine-Operater\STM8L051\Project\main_code\EWSTM8\..\..\..\Utilities\STM8_EVAL\Common\
#        -I
#        C:\Users\THINK\Documents\GitHub\FTT-TwoLine-Operater\STM8L051\Project\main_code\EWSTM8\..\..\..\Utilities\Misc\
#        --require_prototypes --vregs 16
#    List file    =  
#        C:\Users\THINK\Documents\GitHub\FTT-TwoLine-Operater\STM8L051\Project\main_code\EWSTM8\relase\List\stm8l15x_itc.lst
#    Object file  =  
#        C:\Users\THINK\Documents\GitHub\FTT-TwoLine-Operater\STM8L051\Project\main_code\EWSTM8\relase\Obj\stm8l15x_itc.o
#
###############################################################################

C:\Users\THINK\Documents\GitHub\FTT-TwoLine-Operater\STM8L051\Libraries\STM8L15x_StdPeriph_Driver\src\stm8l15x_itc.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm8l15x_itc.c
      4            * @author  MCD Application Team
      5            * @version V1.6.0
      6            * @date    28-June-2013
      7            * @brief   This file provides firmware functions to manage the following 
      8            *          functionality of the Interrupt controller (ITC) peripheral:           
      9            *           - Configuration and management
     10            ******************************************************************************
     11            *
     12            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     13            * You may not use this file except in compliance with the License.
     14            * You may obtain a copy of the License at:
     15            *
     16            *        http://www.st.com/software_license_agreement_liberty_v2
     17            *
     18            * Unless required by applicable law or agreed to in writing, software 
     19            * distributed under the License is distributed on an "AS IS" BASIS, 
     20            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     21            * See the License for the specific language governing permissions and
     22            * limitations under the License.
     23            *
     24            ****************************************************************************** 
     25            */
     26          
     27          /* Includes ------------------------------------------------------------------*/
     28          #include "stm8l15x_itc.h"
     29          
     30          /** @addtogroup STM8L15x_StdPeriph_Driver
     31            * @{
     32            */
     33            
     34          /** @defgroup ITC 
     35            * @brief ITC driver modules
     36            * @{
     37            */ 
     38          /* Private typedef -----------------------------------------------------------*/
     39          /* Private define ------------------------------------------------------------*/
     40          /* Private macro -------------------------------------------------------------*/
     41          /* Private function prototypes -----------------------------------------------*/
     42          /* Private functions ---------------------------------------------------------*/
     43          
     44          /** @defgroup ITC_Private_Functions
     45            * @{
     46            */
     47          
     48          /**
     49            * @brief  Utility function used to read CC register.
     50            * @param  None
     51            * @retval CPU CC register value
     52            */

   \                                 In section .far_func.text, align 1
     53          uint8_t ITC_GetCPUCC(void)
     54          {
     55          #ifdef _COSMIC_
     56            _asm("push cc");
     57            _asm("pop a");
     58            return; /* Ignore compiler warning, the returned value is in A register */
     59          #elif defined _RAISONANCE_ /* _RAISONANCE_ */
     60            return _getCC_();
     61          #else /* _IAR_ */
     62            asm("push cc");
   \                     ITC_GetCPUCC:
   \   000000 8A           push cc
     63            asm("pop a"); /* Ignore compiler warning, the returned value is in A register */
   \   000001 84           pop a
     64          #endif /* _COSMIC_*/
     65          }
                 ^
Warning[Pe940]: missing return statement at end of non-void function
          "ITC_GetCPUCC"
   \   000002 87           RETF
     66          
     67          /** @defgroup ITC_Group1 ITC configuration and management functions
     68           *  @brief   ITC configuration and management functions
     69           *
     70          @verbatim   
     71           ===============================================================================
     72                            ITC configuration and management functions
     73           ===============================================================================  
     74          
     75          @endverbatim
     76            * @{
     77            */
     78            
     79          /**
     80            * @brief  Deinitializes the ITC registers to their default reset value.
     81            * @param  None
     82            * @retval None
     83           */

   \                                 In section .far_func.text, align 1
     84          void ITC_DeInit(void)
     85          {
     86            ITC->ISPR1 = ITC_SPRX_RESET_VALUE;
   \                     ITC_DeInit:
   \   000000 35 FF 7F70   MOV       L:0x7f70, #0xff
     87            ITC->ISPR2 = ITC_SPRX_RESET_VALUE;
   \   000004 35 FF 7F71   MOV       L:0x7f71, #0xff
     88            ITC->ISPR3 = ITC_SPRX_RESET_VALUE;
   \   000008 35 FF 7F72   MOV       L:0x7f72, #0xff
     89            ITC->ISPR4 = ITC_SPRX_RESET_VALUE;
   \   00000C 35 FF 7F73   MOV       L:0x7f73, #0xff
     90            ITC->ISPR5 = ITC_SPRX_RESET_VALUE;
   \   000010 35 FF 7F74   MOV       L:0x7f74, #0xff
     91            ITC->ISPR6 = ITC_SPRX_RESET_VALUE;
   \   000014 35 FF 7F75   MOV       L:0x7f75, #0xff
     92            ITC->ISPR7 = ITC_SPRX_RESET_VALUE;
   \   000018 35 FF 7F76   MOV       L:0x7f76, #0xff
     93            ITC->ISPR8 = ITC_SPRX_RESET_VALUE;
   \   00001C 35 FF 7F77   MOV       L:0x7f77, #0xff
     94          }
   \   000020 87           RETF
     95          
     96          /**
     97            * @brief  Gets the interrupt software priority bits (I1, I0) value from CPU CC register.
     98            * @param  None
     99            * @retval The interrupt software priority bits value.
    100           */

   \                                 In section .far_func.text, align 1
    101          uint8_t ITC_GetSoftIntStatus(void)
    102          {
    103            return ((uint8_t)(ITC_GetCPUCC() & CPU_SOFT_INT_DISABLED));
   \                     ITC_GetSoftIntStatus:
   \   000000 8D ......    CALLF     ITC_GetCPUCC
   \   000004 A4 28        AND       A, #0x28
   \   000006 87           RETF
    104          }
    105          
    106          /**
    107            * @brief  Gets the software priority of the specified interrupt source.
    108            * @param  IRQn : Specifies the peripheral interrupt source.
    109            * @retval Specifies the software priority of the interrupt source.
    110           */

   \                                 In section .far_func.text, align 1
    111          ITC_PriorityLevel_TypeDef ITC_GetSoftwarePriority(IRQn_TypeDef IRQn)
    112          {
   \                     ITC_GetSoftwarePriority:
   \   000000 B7 ..        LD        S:?b3, A
    113            uint8_t Value = 0;
   \   000002 3F ..        CLR       S:?b2
    114            uint8_t Mask = 0;
    115          
    116            /* Check function parameters */
    117            assert_param(IS_ITC_IRQ(IRQn));
    118          
    119            /* Define the mask corresponding to the bits position in the SPR register */
    120            Mask = (uint8_t)(0x03U << ((IRQn % 4U) * 2U));
   \   000004 8D ......    CALLF     ?Subroutine0
   \                     ??CrossCallReturnLabel_1:
   \   000008 B7 ..        LD        S:?b0, A
    121          
    122            switch (IRQn)
   \   00000A B6 ..        LD        A, S:?b3
   \   00000C 4A           DEC       A
   \   00000D 27 4F        JREQ      L:??ITC_GetSoftwarePriority_0
   \   00000F 4A           DEC       A
   \   000010 27 4C        JREQ      L:??ITC_GetSoftwarePriority_0
   \   000012 4A           DEC       A
   \   000013 27 49        JREQ      L:??ITC_GetSoftwarePriority_0
   \   000015 4A           DEC       A
   \   000016 27 4D        JREQ      L:??ITC_GetSoftwarePriority_1
   \   000018 4A           DEC       A
   \   000019 27 4A        JREQ      L:??ITC_GetSoftwarePriority_1
   \   00001B 4A           DEC       A
   \   00001C 27 47        JREQ      L:??ITC_GetSoftwarePriority_1
   \   00001E 4A           DEC       A
   \   00001F 27 44        JREQ      L:??ITC_GetSoftwarePriority_1
   \   000021 4A           DEC       A
   \   000022 27 48        JREQ      L:??ITC_GetSoftwarePriority_2
   \   000024 4A           DEC       A
   \   000025 27 45        JREQ      L:??ITC_GetSoftwarePriority_2
   \   000027 4A           DEC       A
   \   000028 27 42        JREQ      L:??ITC_GetSoftwarePriority_2
   \   00002A 4A           DEC       A
   \   00002B 27 3F        JREQ      L:??ITC_GetSoftwarePriority_2
   \   00002D 4A           DEC       A
   \   00002E 27 43        JREQ      L:??ITC_GetSoftwarePriority_3
   \   000030 4A           DEC       A
   \   000031 27 40        JREQ      L:??ITC_GetSoftwarePriority_3
   \   000033 4A           DEC       A
   \   000034 27 3D        JREQ      L:??ITC_GetSoftwarePriority_3
   \   000036 4A           DEC       A
   \   000037 27 3A        JREQ      L:??ITC_GetSoftwarePriority_3
   \   000039 A0 02        SUB       A, #0x2
   \   00003B 27 3D        JREQ      L:??ITC_GetSoftwarePriority_4
   \   00003D 4A           DEC       A
   \   00003E 27 3A        JREQ      L:??ITC_GetSoftwarePriority_4
   \   000040 4A           DEC       A
   \   000041 27 37        JREQ      L:??ITC_GetSoftwarePriority_4
   \   000043 4A           DEC       A
   \   000044 27 3B        JREQ      L:??ITC_GetSoftwarePriority_5
   \   000046 4A           DEC       A
   \   000047 27 38        JREQ      L:??ITC_GetSoftwarePriority_5
   \   000049 4A           DEC       A
   \   00004A 27 35        JREQ      L:??ITC_GetSoftwarePriority_5
   \   00004C A0 03        SUB       A, #0x3
   \   00004E 27 38        JREQ      L:??ITC_GetSoftwarePriority_6
   \   000050 4A           DEC       A
   \   000051 27 35        JREQ      L:??ITC_GetSoftwarePriority_6
   \   000053 4A           DEC       A
   \   000054 27 32        JREQ      L:??ITC_GetSoftwarePriority_6
   \   000056 4A           DEC       A
   \   000057 27 36        JREQ      L:??ITC_GetSoftwarePriority_7
   \   000059 4A           DEC       A
   \   00005A 27 33        JREQ      L:??ITC_GetSoftwarePriority_7
   \   00005C 20 38        JRA       L:??ITC_GetSoftwarePriority_8
    123            {
    124              case FLASH_IRQn:
    125              case DMA1_CHANNEL0_1_IRQn:
    126              case DMA1_CHANNEL2_3_IRQn:
    127                Value = (uint8_t)(ITC->ISPR1 & Mask); /* Read software priority */
   \                     ??ITC_GetSoftwarePriority_0:
   \   00005E B6 ..        LD        A, S:?b0
   \   000060 C4 7F70      AND       A, L:0x7f70
   \   000063 20 2F        JRA       ??ITC_GetSoftwarePriority_9
    128                break;
    129          
    130              case EXTIE_F_PVD_IRQn:
    131          #if defined (STM8L15X_MD) || defined (STM8L05X_MD_VL) || defined (STM8AL31_L_MD)
    132              case RTC_IRQn:
    133              case EXTIB_IRQn:
    134              case EXTID_IRQn:
    135          #elif defined (STM8L15X_LD) || defined (STM8L05X_LD_VL)
    136              case RTC_CSSLSE_IRQn:
    137              case EXTIB_IRQn:
    138              case EXTID_IRQn:
    139          #elif defined (STM8L15X_HD) || defined (STM8L15X_MDP) || defined (STM8L05X_HD_VL)
    140              case RTC_CSSLSE_IRQn:
    141              case EXTIB_G_IRQn:
    142              case EXTID_H_IRQn:
    143          #endif  /* STM8L15X_MD */
    144                Value = (uint8_t)(ITC->ISPR2 & Mask); /* Read software priority */
   \                     ??ITC_GetSoftwarePriority_1:
   \   000065 B6 ..        LD        A, S:?b0
   \   000067 C4 7F71      AND       A, L:0x7f71
   \   00006A 20 28        JRA       ??ITC_GetSoftwarePriority_9
    145                break;
    146          
    147              case EXTI0_IRQn:
    148              case EXTI1_IRQn:
    149              case EXTI2_IRQn:
    150              case EXTI3_IRQn:
    151                Value = (uint8_t)(ITC->ISPR3 & Mask); /* Read software priority */
   \                     ??ITC_GetSoftwarePriority_2:
   \   00006C B6 ..        LD        A, S:?b0
   \   00006E C4 7F72      AND       A, L:0x7f72
   \   000071 20 21        JRA       ??ITC_GetSoftwarePriority_9
    152                break;
    153          
    154              case EXTI4_IRQn:
    155              case EXTI5_IRQn:
    156              case EXTI6_IRQn:
    157              case EXTI7_IRQn:
    158                Value = (uint8_t)(ITC->ISPR4 & Mask); /* Read software priority */
   \                     ??ITC_GetSoftwarePriority_3:
   \   000073 B6 ..        LD        A, S:?b0
   \   000075 C4 7F73      AND       A, L:0x7f73
   \   000078 20 1A        JRA       ??ITC_GetSoftwarePriority_9
    159                break;
    160          
    161          #if defined (STM8L15X_LD) || defined (STM8L05X_LD_VL)
    162              case SWITCH_CSS_IRQn:
    163          #else
    164              case SWITCH_CSS_BREAK_DAC_IRQn:
    165          #endif /* STM8L15X_LD */		
    166              case ADC1_COMP_IRQn:
    167          #if defined (STM8L15X_MD) || defined (STM8L05X_MD_VL) || defined (STM8AL31_L_MD)
    168              case LCD_IRQn:
    169              case TIM2_UPD_OVF_TRG_BRK_IRQn:
    170          #elif defined (STM8L15X_LD) || defined (STM8L05X_LD_VL)
    171              case TIM2_UPD_OVF_TRG_BRK_IRQn:
    172          #elif defined (STM8L15X_HD) || defined (STM8L15X_MDP) || defined (STM8L05X_HD_VL)
    173              case LCD_AES_IRQn:
    174              case TIM2_UPD_OVF_TRG_BRK_USART2_TX_IRQn:
    175          #endif  /* STM8L15X_MD */
    176                Value = (uint8_t)(ITC->ISPR5 & Mask); /* Read software priority */
   \                     ??ITC_GetSoftwarePriority_4:
   \   00007A B6 ..        LD        A, S:?b0
   \   00007C C4 7F74      AND       A, L:0x7f74
   \   00007F 20 13        JRA       ??ITC_GetSoftwarePriority_9
    177                break;
    178          			
    179          #if !defined (STM8L15X_LD) && !defined (STM8L05X_LD_VL)
    180              case TIM1_UPD_OVF_TRG_IRQn:
    181          #endif /* STM8L15X_LD */		
    182          #if defined (STM8L15X_MD) || defined (STM8L15X_LD) || defined (STM8L05X_MD_VL) ||\
    183           defined (STM8AL31_L_MD) || defined (STM8L05X_LD_VL)
    184              case TIM2_CC_IRQn:
    185              case TIM3_UPD_OVF_TRG_BRK_IRQn :
    186              case TIM3_CC_IRQn:
    187          #elif defined (STM8L15X_HD) || defined (STM8L15X_MDP) || defined (STM8L05X_HD_VL)
    188              case TIM2_CC_USART2_RX_IRQn:
    189              case TIM3_UPD_OVF_TRG_BRK_USART3_TX_IRQn :
    190              case TIM3_CC_USART3_RX_IRQn:
    191          #endif  /* STM8L15X_MD */
    192                Value = (uint8_t)(ITC->ISPR6 & Mask); /* Read software priority */
   \                     ??ITC_GetSoftwarePriority_5:
   \   000081 B6 ..        LD        A, S:?b0
   \   000083 C4 7F75      AND       A, L:0x7f75
   \   000086 20 0C        JRA       ??ITC_GetSoftwarePriority_9
    193                break;
    194          			
    195          #if !defined (STM8L15X_LD) && !defined (STM8L05X_LD_VL)
    196              case TIM1_CC_IRQn:
    197          #endif /* STM8L15X_LD */	
    198              case TIM4_UPD_OVF_TRG_IRQn:
    199              case SPI1_IRQn:
    200          #if defined (STM8L15X_MD) || defined (STM8L15X_LD) || defined (STM8L05X_MD_VL) ||\
    201           defined (STM8AL31_L_MD) || defined (STM8L05X_LD_VL)
    202              case USART1_TX_IRQn:
    203          #elif defined (STM8L15X_HD) || defined (STM8L15X_MDP) || defined (STM8L05X_HD_VL)
    204              case USART1_TX_TIM5_UPD_OVF_TRG_BRK_IRQn:
    205          #endif  /* STM8L15X_MD || STM8L15X_LD */
    206                Value = (uint8_t)(ITC->ISPR7 & Mask); /* Read software priority */
   \                     ??ITC_GetSoftwarePriority_6:
   \   000088 B6 ..        LD        A, S:?b0
   \   00008A C4 7F76      AND       A, L:0x7f76
   \   00008D 20 05        JRA       ??ITC_GetSoftwarePriority_9
    207                break;
    208          
    209          #if defined (STM8L15X_MD) || defined (STM8L15X_LD) || defined (STM8L05X_MD_VL) ||\
    210           defined (STM8AL31_L_MD) || defined (STM8L05X_LD_VL)
    211              case USART1_RX_IRQn:
    212              case I2C1_IRQn:
    213          #elif defined (STM8L15X_HD) || defined (STM8L15X_MDP) || defined (STM8L05X_HD_VL)
    214              case USART1_RX_TIM5_CC_IRQn:
    215              case I2C1_SPI2_IRQn:
    216          #endif  /* STM8L15X_MD || STM8L15X_LD*/
    217                Value = (uint8_t)(ITC->ISPR8 & Mask); /* Read software priority */
   \                     ??ITC_GetSoftwarePriority_7:
   \   00008F B6 ..        LD        A, S:?b0
   \   000091 C4 7F77      AND       A, L:0x7f77
   \                     ??ITC_GetSoftwarePriority_9:
   \   000094 B7 ..        LD        S:?b2, A
    218                break;
    219          
    220              default:
    221                break;
    222            }
    223          
    224            Value >>= (uint8_t)((IRQn % 4u) * 2u);
    225          
    226            return((ITC_PriorityLevel_TypeDef)Value);
   \                     ??ITC_GetSoftwarePriority_8:
   \   000096 45 .. ..     MOV       S:?b0, S:?b1
   \   000099 B6 ..        LD        A, S:?b2
   \   00009B AC ......    JPF       L:?srl8_a_a_b0
    227          
    228          }

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine0:
   \   000000 A4 03        AND       A, #0x3
   \   000002 48           SLL       A
   \   000003 B7 ..        LD        S:?b1, A
   \   000005 A6 03        LD        A, #0x3
   \   000007 45 .. ..     MOV       S:?b0, S:?b1
   \   00000A AC ......    JPF       L:?sll8_a_a_b0
    229          
    230          /**
    231            * @brief  Sets the software priority of the specified interrupt source.
    232            * @note   The modification of the software priority is only possible when
    233            *         the interrupts are disabled.
    234            * @note   The normal behavior is to disable the interrupt before calling
    235            *         this function, and re-enable it after.
    236            * @note   The priority level 0 cannot be set (see product specification
    237            *         for more details).
    238            * @param  IRQn : Specifies the peripheral interrupt source.
    239            * @param  ITC_PriorityLevel : Specifies the software priority value to set
    240            *          This parameter can be one of the following values:
    241            *            @arg ITC_PriorityLevel_0: Software priority level 0 (cannot be written)
    242            *            @arg ITC_PriorityLevel_1: Software priority level 1
    243            *            @arg ITC_PriorityLevel_2: Software priority level 2
    244            *            @arg ITC_PriorityLevel_3: Software priority level 3     
    245            * @retval None
    246            */

   \                                 In section .far_func.text, align 1
    247          void ITC_SetSoftwarePriority(IRQn_TypeDef IRQn, ITC_PriorityLevel_TypeDef ITC_PriorityLevel)
    248          {
   \                     ITC_SetSoftwarePriority:
   \   000000 B7 ..        LD        S:?b3, A
   \   000002 45 .. ..     MOV       S:?b4, S:?b0
    249            uint8_t Mask = 0;
    250            uint8_t NewPriority = 0;
    251          
    252            /* Check function parameters */
    253            assert_param(IS_ITC_IRQ(IRQn));
    254            assert_param(IS_ITC_PRIORITY(ITC_PriorityLevel));
    255          
    256            /* Check if interrupts are disabled */
    257            assert_param(IS_ITC_INTERRUPTS_DISABLED);
    258          
    259            /* Define the mask corresponding to the bits position in the SPR register */
    260            /* The mask is reversed in order to clear the 2 bits after more easily */
    261            Mask = (uint8_t)(~(uint8_t)(0x03U << ((IRQn % 4U) * 2U)));
   \   000005 8D ......    CALLF     ?Subroutine0
   \                     ??CrossCallReturnLabel_0:
   \   000009 B7 ..        LD        S:?b2, A
   \   00000B 33 ..        CPL       S:?b2
    262            /* Define the new priority to write */
    263            NewPriority = (uint8_t)((uint8_t)(ITC_PriorityLevel) << ((IRQn % 4U) * 2U));
   \   00000D 45 .. ..     MOV       S:?b0, S:?b1
   \   000010 B6 ..        LD        A, S:?b4
   \   000012 8D ......    CALLF     L:?sll8_a_a_b0
   \   000016 B7 ..        LD        S:?b0, A
    264          
    265            switch (IRQn)
   \   000018 B6 ..        LD        A, S:?b3
   \   00001A 4A           DEC       A
   \   00001B 27 4E        JREQ      L:??ITC_SetSoftwarePriority_0
   \   00001D 4A           DEC       A
   \   00001E 27 4B        JREQ      L:??ITC_SetSoftwarePriority_0
   \   000020 4A           DEC       A
   \   000021 27 48        JREQ      L:??ITC_SetSoftwarePriority_0
   \   000023 4A           DEC       A
   \   000024 27 56        JREQ      L:??ITC_SetSoftwarePriority_1
   \   000026 4A           DEC       A
   \   000027 27 53        JREQ      L:??ITC_SetSoftwarePriority_1
   \   000029 4A           DEC       A
   \   00002A 27 50        JREQ      L:??ITC_SetSoftwarePriority_1
   \   00002C 4A           DEC       A
   \   00002D 27 4D        JREQ      L:??ITC_SetSoftwarePriority_1
   \   00002F 4A           DEC       A
   \   000030 27 5B        JREQ      L:??ITC_SetSoftwarePriority_2
   \   000032 4A           DEC       A
   \   000033 27 58        JREQ      L:??ITC_SetSoftwarePriority_2
   \   000035 4A           DEC       A
   \   000036 27 55        JREQ      L:??ITC_SetSoftwarePriority_2
   \   000038 4A           DEC       A
   \   000039 27 52        JREQ      L:??ITC_SetSoftwarePriority_2
   \   00003B 4A           DEC       A
   \   00003C 27 60        JREQ      L:??ITC_SetSoftwarePriority_3
   \   00003E 4A           DEC       A
   \   00003F 27 5D        JREQ      L:??ITC_SetSoftwarePriority_3
   \   000041 4A           DEC       A
   \   000042 27 5A        JREQ      L:??ITC_SetSoftwarePriority_3
   \   000044 4A           DEC       A
   \   000045 27 57        JREQ      L:??ITC_SetSoftwarePriority_3
   \   000047 A0 02        SUB       A, #0x2
   \   000049 27 64        JREQ      L:??ITC_SetSoftwarePriority_4
   \   00004B 4A           DEC       A
   \   00004C 27 61        JREQ      L:??ITC_SetSoftwarePriority_4
   \   00004E 4A           DEC       A
   \   00004F 27 5E        JREQ      L:??ITC_SetSoftwarePriority_4
   \   000051 4A           DEC       A
   \   000052 27 6C        JREQ      L:??ITC_SetSoftwarePriority_5
   \   000054 4A           DEC       A
   \   000055 27 69        JREQ      L:??ITC_SetSoftwarePriority_5
   \   000057 4A           DEC       A
   \   000058 27 66        JREQ      L:??ITC_SetSoftwarePriority_5
   \   00005A A0 03        SUB       A, #0x3
   \   00005C 27 73        JREQ      L:??ITC_SetSoftwarePriority_6
   \   00005E 4A           DEC       A
   \   00005F 27 70        JREQ      L:??ITC_SetSoftwarePriority_6
   \   000061 4A           DEC       A
   \   000062 27 6D        JREQ      L:??ITC_SetSoftwarePriority_6
   \   000064 4A           DEC       A
   \   000065 27 7B        JREQ      L:??ITC_SetSoftwarePriority_7
   \   000067 4A           DEC       A
   \   000068 27 78        JREQ      L:??ITC_SetSoftwarePriority_7
   \   00006A 87           RETF
    266            {
    267              case FLASH_IRQn:
    268              case DMA1_CHANNEL0_1_IRQn:
    269              case DMA1_CHANNEL2_3_IRQn:
    270                ITC->ISPR1 &= Mask;
   \                     ??ITC_SetSoftwarePriority_0:
   \   00006B B6 ..        LD        A, S:?b2
   \   00006D C4 7F70      AND       A, L:0x7f70
   \   000070 C7 7F70      LD        L:0x7f70, A
    271                ITC->ISPR1 |= NewPriority;
   \   000073 B6 ..        LD        A, S:?b0
   \   000075 CA 7F70      OR        A, L:0x7f70
   \   000078 C7 7F70      LD        L:0x7f70, A
    272                break;
   \   00007B 87           RETF
    273          
    274              case EXTIE_F_PVD_IRQn:
    275          #if defined (STM8L15X_MD) || defined (STM8L05X_MD_VL) || defined (STM8AL31_L_MD)
    276              case RTC_IRQn:
    277              case EXTIB_IRQn:
    278              case EXTID_IRQn:
    279          #elif defined (STM8L15X_LD) || defined (STM8L05X_LD_VL)
    280              case RTC_CSSLSE_IRQn:
    281              case EXTIB_IRQn:
    282              case EXTID_IRQn:
    283          #elif defined (STM8L15X_HD) || defined (STM8L15X_MDP) || defined (STM8L05X_HD_VL)
    284              case RTC_CSSLSE_IRQn:
    285              case EXTIB_G_IRQn:
    286              case EXTID_H_IRQn:
    287          #endif  /* STM8L15X_MD */
    288                ITC->ISPR2 &= Mask;
   \                     ??ITC_SetSoftwarePriority_1:
   \   00007C B6 ..        LD        A, S:?b2
   \   00007E C4 7F71      AND       A, L:0x7f71
   \   000081 C7 7F71      LD        L:0x7f71, A
    289                ITC->ISPR2 |= NewPriority;
   \   000084 B6 ..        LD        A, S:?b0
   \   000086 CA 7F71      OR        A, L:0x7f71
   \   000089 C7 7F71      LD        L:0x7f71, A
    290                break;
   \   00008C 87           RETF
    291          
    292              case EXTI0_IRQn:
    293              case EXTI1_IRQn:
    294              case EXTI2_IRQn:
    295              case EXTI3_IRQn:
    296                ITC->ISPR3 &= Mask;
   \                     ??ITC_SetSoftwarePriority_2:
   \   00008D B6 ..        LD        A, S:?b2
   \   00008F C4 7F72      AND       A, L:0x7f72
   \   000092 C7 7F72      LD        L:0x7f72, A
    297                ITC->ISPR3 |= NewPriority;
   \   000095 B6 ..        LD        A, S:?b0
   \   000097 CA 7F72      OR        A, L:0x7f72
   \   00009A C7 7F72      LD        L:0x7f72, A
    298                break;
   \   00009D 87           RETF
    299          
    300              case EXTI4_IRQn:
    301              case EXTI5_IRQn:
    302              case EXTI6_IRQn:
    303              case EXTI7_IRQn:
    304                ITC->ISPR4 &= Mask;
   \                     ??ITC_SetSoftwarePriority_3:
   \   00009E B6 ..        LD        A, S:?b2
   \   0000A0 C4 7F73      AND       A, L:0x7f73
   \   0000A3 C7 7F73      LD        L:0x7f73, A
    305                ITC->ISPR4 |= NewPriority;
   \   0000A6 B6 ..        LD        A, S:?b0
   \   0000A8 CA 7F73      OR        A, L:0x7f73
   \   0000AB C7 7F73      LD        L:0x7f73, A
    306                break;
   \   0000AE 87           RETF
    307          #if !defined (STM8L15X_LD) && !defined (STM8L05X_LD_VL)
    308              case SWITCH_CSS_BREAK_DAC_IRQn:
    309          #else
    310              case SWITCH_CSS_IRQn:
    311          #endif /*	STM8L15X_LD	*/
    312              case ADC1_COMP_IRQn:
    313          #if defined (STM8L15X_MD) || defined (STM8L05X_MD_VL) || defined (STM8AL31_L_MD)
    314              case LCD_IRQn:
    315              case TIM2_UPD_OVF_TRG_BRK_IRQn:
    316          #elif defined (STM8L15X_LD) || defined (STM8L05X_LD_VL)
    317              case TIM2_UPD_OVF_TRG_BRK_IRQn:
    318          #elif defined (STM8L15X_HD) || defined (STM8L15X_MDP) || defined (STM8L05X_HD_VL)
    319              case LCD_AES_IRQn:
    320              case TIM2_UPD_OVF_TRG_BRK_USART2_TX_IRQn:
    321          #endif  /* STM8L15X_MD */
    322                ITC->ISPR5 &= Mask;
   \                     ??ITC_SetSoftwarePriority_4:
   \   0000AF B6 ..        LD        A, S:?b2
   \   0000B1 C4 7F74      AND       A, L:0x7f74
   \   0000B4 C7 7F74      LD        L:0x7f74, A
    323                ITC->ISPR5 |= NewPriority;
   \   0000B7 B6 ..        LD        A, S:?b0
   \   0000B9 CA 7F74      OR        A, L:0x7f74
   \   0000BC C7 7F74      LD        L:0x7f74, A
    324                break;
   \   0000BF 87           RETF
    325          #if !defined (STM8L15X_LD) && !defined (STM8L05X_LD_VL)
    326              case TIM1_UPD_OVF_TRG_IRQn:
    327          #endif  /* STM8L15X_LD */
    328          #if defined (STM8L15X_MD) || defined (STM8L15X_LD) || defined (STM8L05X_MD_VL) ||\
    329           defined (STM8AL31_L_MD) || defined (STM8L05X_LD_VL)
    330              case TIM2_CC_IRQn:
    331              case TIM3_UPD_OVF_TRG_BRK_IRQn :
    332              case TIM3_CC_IRQn:
    333          #elif defined (STM8L15X_HD) || defined (STM8L15X_MDP) || defined (STM8L05X_HD_VL)
    334              case TIM2_CC_USART2_RX_IRQn:
    335              case TIM3_UPD_OVF_TRG_BRK_USART3_TX_IRQn :
    336              case TIM3_CC_USART3_RX_IRQn:
    337          #endif  /* STM8L15X_MD */
    338                ITC->ISPR6 &= Mask;
   \                     ??ITC_SetSoftwarePriority_5:
   \   0000C0 B6 ..        LD        A, S:?b2
   \   0000C2 C4 7F75      AND       A, L:0x7f75
   \   0000C5 C7 7F75      LD        L:0x7f75, A
    339                ITC->ISPR6 |= NewPriority;
   \   0000C8 B6 ..        LD        A, S:?b0
   \   0000CA CA 7F75      OR        A, L:0x7f75
   \   0000CD C7 7F75      LD        L:0x7f75, A
    340                break;
   \   0000D0 87           RETF
    341          
    342          #if !defined (STM8L15X_LD) && !defined (STM8L05X_LD_VL)
    343              case TIM1_CC_IRQn:
    344          #endif  /* STM8L15X_LD */
    345              case TIM4_UPD_OVF_TRG_IRQn:
    346              case SPI1_IRQn:
    347          #if defined (STM8L15X_MD) || defined (STM8L15X_LD) || defined (STM8L05X_MD_VL) ||\
    348           defined (STM8AL31_L_MD) || defined (STM8L05X_LD_VL)
    349              case USART1_TX_IRQn:
    350          #elif defined (STM8L15X_HD) || defined (STM8L15X_MDP) || defined (STM8L05X_HD_VL)
    351              case USART1_TX_TIM5_UPD_OVF_TRG_BRK_IRQn:
    352          #endif  /* STM8L15X_MD */
    353                ITC->ISPR7 &= Mask;
   \                     ??ITC_SetSoftwarePriority_6:
   \   0000D1 B6 ..        LD        A, S:?b2
   \   0000D3 C4 7F76      AND       A, L:0x7f76
   \   0000D6 C7 7F76      LD        L:0x7f76, A
    354                ITC->ISPR7 |= NewPriority;
   \   0000D9 B6 ..        LD        A, S:?b0
   \   0000DB CA 7F76      OR        A, L:0x7f76
   \   0000DE C7 7F76      LD        L:0x7f76, A
    355                break;
   \   0000E1 87           RETF
    356          
    357          #if defined (STM8L15X_MD) || defined (STM8L15X_LD) || defined (STM8L05X_MD_VL) ||\
    358           defined (STM8AL31_L_MD) || defined (STM8L05X_LD_VL)
    359              case USART1_RX_IRQn:
    360              case I2C1_IRQn:
    361          #elif defined (STM8L15X_HD) || defined (STM8L15X_MDP) || defined (STM8L05X_HD_VL)
    362              case USART1_RX_TIM5_CC_IRQn:
    363              case I2C1_SPI2_IRQn:
    364          #endif  /* STM8L15X_MD */
    365                ITC->ISPR8 &= Mask;
   \                     ??ITC_SetSoftwarePriority_7:
   \   0000E2 B6 ..        LD        A, S:?b2
   \   0000E4 C4 7F77      AND       A, L:0x7f77
   \   0000E7 C7 7F77      LD        L:0x7f77, A
    366                ITC->ISPR8 |= NewPriority;
   \   0000EA B6 ..        LD        A, S:?b0
   \   0000EC CA 7F77      OR        A, L:0x7f77
   \   0000EF C7 7F77      LD        L:0x7f77, A
    367                break;
    368          
    369              default:
    370                break;
    371            }
    372          }
   \   0000F2 87           RETF
    373          
    374          /**
    375            * @}
    376            */
    377          
    378          /**
    379            * @}
    380            */
    381          
    382          /**
    383            * @}
    384            */
    385          
    386          /**
    387            * @}
    388            */
    389            
    390          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Section sizes:

   Bytes  Function/Label
   -----  --------------
      14  ?Subroutine0
      33  ITC_DeInit
       3  ITC_GetCPUCC
       7  ITC_GetSoftIntStatus
     159  ITC_GetSoftwarePriority
     243  ITC_SetSoftwarePriority

 
 459 bytes in section .far_func.text
 
 459 bytes of CODE memory

Errors: none
Warnings: 1
